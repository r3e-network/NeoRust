"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[1263],{5784:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"contracts","title":"Smart Contracts","description":"Deploy and interact with smart contracts on Neo N3.","source":"@site/sdk/contracts.md","sourceDirName":".","slug":"/contracts","permalink":"/sdk/contracts","draft":false,"unlisted":false,"editUrl":"https://github.com/R3E-Network/NeoRust/tree/main/website/sdk/contracts.md","tags":[],"version":"current","lastUpdatedBy":"Jimmy","lastUpdatedAt":1748828770000,"frontMatter":{},"sidebar":"sdkSidebar","previous":{"title":"Transaction Management","permalink":"/sdk/transactions"},"next":{"title":"Token Operations","permalink":"/sdk/tokens"}}');var a=e(4848),s=e(8453);const o={},c="Smart Contracts",i={},l=[{value:"Contract Invocation",id:"contract-invocation",level:2},{value:"State-Changing Calls",id:"state-changing-calls",level:2},{value:"Features",id:"features",level:2}];function d(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"smart-contracts",children:"Smart Contracts"})}),"\n",(0,a.jsx)(t.p,{children:"Deploy and interact with smart contracts on Neo N3."}),"\n",(0,a.jsx)(t.h2,{id:"contract-invocation",children:"Contract Invocation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let contract_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    \n    // Read-only call\n    let result = client\n        .invoke_function(\n            &contract_hash,\n            "getValue",\n            vec![ContractParameter::String("key".to_string())],\n            vec![],\n        )\n        .await?;\n    \n    println!("Result: {:?}", result);\n    Ok(())\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"state-changing-calls",children:"State-Changing Calls"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let account = Account::from_private_key("private_key")?;\n    let signer = AccountSigner::new(account);\n    \n    let contract_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    \n    let tx_hash = client\n        .invoke_function_tx(\n            &signer,\n            &contract_hash,\n            "setValue",\n            vec![\n                ContractParameter::String("key".to_string()),\n                ContractParameter::String("value".to_string()),\n            ],\n            None,\n        )\n        .await?;\n    \n    println!("Transaction: {}", tx_hash);\n    Ok(())\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Contract deployment"}),"\n",(0,a.jsx)(t.li,{children:"Method invocation"}),"\n",(0,a.jsx)(t.li,{children:"Event monitoring"}),"\n",(0,a.jsx)(t.li,{children:"Parameter handling"}),"\n"]})]})}function u(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>c});var r=e(6540);const a={},s=r.createContext(a);function o(n){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(s.Provider,{value:t},n.children)}}}]);