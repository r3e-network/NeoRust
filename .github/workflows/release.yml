name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.5.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Validate version format
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
      
      - name: Check CHANGELOG
        run: |
          VERSION=${{ steps.version.outputs.version }}
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "Version $VERSION not found in CHANGELOG.md"
            exit 1
          fi

  test:
    name: Test Release
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --workspace --all-features --release
      
      - name: Run clippy
        run: cargo clippy --workspace --all-features --release -- -D warnings

  publish-crates:
    name: Publish to crates.io
    needs: [validate, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      
      - name: Publish crates in order
        run: |
          # Publish in dependency order
          cargo publish -p neo3-types --allow-dirty
          sleep 30
          cargo publish -p neo3-crypto --allow-dirty
          sleep 30
          cargo publish -p neo3-rpc --allow-dirty
          sleep 30
          cargo publish -p neo3-builder --allow-dirty
          sleep 30
          cargo publish -p neo3-wallets --allow-dirty
          sleep 30
          cargo publish -p neo3-contracts --allow-dirty
          sleep 30
          cargo publish -p neo3-macros --allow-dirty
          sleep 30
          cargo publish -p neo3 --allow-dirty

  build-gui:
    name: Build GUI
    needs: [validate, test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: .AppImage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: .dmg
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: .dmg
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: neo-gui -> target
      
      - name: Install Node dependencies
        working-directory: neo-gui
        run: npm ci
      
      - name: Build GUI
        working-directory: neo-gui
        run: npm run tauri build -- --target ${{ matrix.target }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: neo-gui-${{ matrix.target }}
          path: |
            neo-gui/target/release/bundle/appimage/*${{ matrix.ext }}
            neo-gui/target/release/bundle/msi/*${{ matrix.ext }}
            neo-gui/target/release/bundle/dmg/*${{ matrix.ext }}

  create-release:
    name: Create GitHub Release
    needs: [validate, publish-crates, build-gui]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Extract changelog
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: NeoRust v${{ needs.validate.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          files: |
            artifacts/**/*

  update-docs:
    name: Update Documentation
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build docs
        run: |
          git checkout main
          cargo doc --workspace --no-deps --all-features
          cp -r target/doc/* .
          git checkout gh-pages
          git add .
          git commit -m "Update docs for v${{ needs.validate.outputs.version }}"
          git push

  announce:
    name: Announce Release
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          echo "NeoRust v$VERSION has been released!"
          # Add webhook notifications here (Discord, Slack, etc.)