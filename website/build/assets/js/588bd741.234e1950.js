"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[4324],{633:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start","description":"Get up and running with NeoRust SDK in just a few minutes. This guide will walk you through creating your first Neo N3 application.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/R3E-Network/NeoRust/tree/main/website/docs/getting-started/quick-start.md","tags":[],"version":"current","lastUpdatedBy":"Jimmy","lastUpdatedAt":1748700629000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/docs/getting-started/installation"},"next":{"title":"\ud83e\uddea Testing","permalink":"/docs/testing"}}');var s=t(4848),o=t(8453);const i={},l="Quick Start",a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Your First Connection",id:"1-your-first-connection",level:2},{value:"2. Create Your First Account",id:"2-create-your-first-account",level:2},{value:"3. Check Account Balance",id:"3-check-account-balance",level:2},{value:"4. Working with Wallets",id:"4-working-with-wallets",level:2},{value:"5. Invoke a Smart Contract",id:"5-invoke-a-smart-contract",level:2},{value:"6. Complete Example: Transfer Tokens",id:"6-complete-example-transfer-tokens",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Reusing Connections",id:"reusing-connections",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"What&#39;s Next?",id:"whats-next",level:3},{value:"Useful Resources",id:"useful-resources",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsx)(n.p,{children:"Get up and running with NeoRust SDK in just a few minutes. This guide will walk you through creating your first Neo N3 application."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rust 1.70+ installed"}),"\n",(0,s.jsx)(n.li,{children:"NeoRust SDK added to your project"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you haven't installed NeoRust yet, see the ",(0,s.jsx)(n.a,{href:"/docs/getting-started/installation",children:"Installation Guide"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"1-your-first-connection",children:"1. Your First Connection"}),"\n",(0,s.jsx)(n.p,{children:"Let's start by connecting to the Neo N3 network and getting some basic information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to Neo N3 TestNet\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Get network information\n    let version = client.get_version().await?;\n    let block_count = client.get_block_count().await?;\n    \n    println!("Connected to: {}", version.useragent);\n    println!("Network: {}", version.network);\n    println!("Current block height: {}", block_count);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Run this with ",(0,s.jsx)(n.code,{children:"cargo run"})," and you should see output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Connected to: Neo:3.6.0\nNetwork: 894710606\nCurrent block height: 2845234\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-create-your-first-account",children:"2. Create Your First Account"}),"\n",(0,s.jsx)(n.p,{children:"Neo accounts are the foundation of the ecosystem. Let's create one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new account\n    let account = Account::create()?;\n    \n    // Display account information\n    println!("\ud83c\udf89 New account created!");\n    println!("Address: {}", account.get_address());\n    println!("Script Hash: {}", account.get_script_hash());\n    \n    // Get the public key\n    let public_key = account.get_public_key();\n    println!("Public Key: {}", hex::encode(public_key.encode_point(true)));\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Keep your private keys safe!"})," In production, never log or expose private keys. Store them securely using proper key management practices."]})}),"\n",(0,s.jsx)(n.h2,{id:"3-check-account-balance",children:"3. Check Account Balance"}),"\n",(0,s.jsx)(n.p,{children:"Let's check the balance of any Neo address:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Use any Neo address (this one has testnet tokens)\n    let address = "NbnjKGMBJzJ6j5PHeYhjJDaQ5Vy5UYu4Fv";\n    let script_hash = address.to_script_hash()?;\n    \n    // Check GAS balance\n    let gas_token = GasToken::new(&client);\n    let gas_balance = gas_token.balance_of(&script_hash).await?;\n    let gas_decimals = gas_token.decimals().await?;\n    \n    // Check NEO balance\n    let neo_token = NeoToken::new(&client);\n    let neo_balance = neo_token.balance_of(&script_hash).await?;\n    \n    println!("Address: {}", address);\n    println!("GAS Balance: {} (decimals: {})", gas_balance, gas_decimals);\n    println!("NEO Balance: {}", neo_balance);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"4-working-with-wallets",children:"4. Working with Wallets"}),"\n",(0,s.jsx)(n.p,{children:"For managing multiple accounts, use wallets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new wallet\n    let mut wallet = Wallet::new();\n    wallet.set_name("MyFirstWallet".to_string());\n    \n    // Add multiple accounts\n    for i in 1..=3 {\n        let account = Account::create()?;\n        wallet.add_account(account);\n        println!("Added account {}: {}", i, wallet.get_accounts().last().unwrap().get_address());\n    }\n    \n    // Set the first account as default\n    if let Some(first_account) = wallet.get_accounts().first() {\n        wallet.set_default_account(first_account.get_script_hash());\n    }\n    \n    println!("\\n\ud83d\udcbc Wallet \'{}\' created with {} accounts", \n             wallet.get_name(), \n             wallet.get_accounts().len());\n    \n    if let Some(default_account) = wallet.get_default_account() {\n        println!("Default account: {}", default_account.get_address());\n    }\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"5-invoke-a-smart-contract",children:"5. Invoke a Smart Contract"}),"\n",(0,s.jsx)(n.p,{children:"Let's call a simple smart contract method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Get GAS token info (GAS is a native contract)\n    let gas_token = GasToken::new(&client);\n    \n    // Call read-only methods\n    let symbol = gas_token.symbol().await?;\n    let decimals = gas_token.decimals().await?;\n    let total_supply = gas_token.total_supply().await?;\n    \n    println!("Token Information:");\n    println!("  Symbol: {}", symbol);\n    println!("  Decimals: {}", decimals);\n    println!("  Total Supply: {}", total_supply);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"6-complete-example-transfer-tokens",children:"6. Complete Example: Transfer Tokens"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example that demonstrates transferring GAS tokens:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Load an account with some GAS (you\'ll need to fund this on testnet)\n    // For demo purposes - in practice, load from secure storage\n    let sender = Account::from_private_key("your_private_key_here")?;\n    let signer = AccountSigner::new(sender);\n    \n    // Recipient address\n    let recipient = "NRecipientAddressHere".to_script_hash()?;\n    \n    // Transfer 1 GAS (1 GAS = 100,000,000 smallest units)\n    let gas_token = GasToken::new(&client);\n    let amount = 100_000_000; // 1 GAS\n    \n    println!("Sending {} GAS to {}...", amount as f64 / 100_000_000.0, recipient);\n    \n    // Execute the transfer\n    let tx_hash = gas_token\n        .transfer(&signer, &recipient, amount, None)\n        .await?;\n    \n    println!("\u2705 Transfer successful!");\n    println!("Transaction Hash: {}", tx_hash);\n    println!("View on explorer: https://testnet.neotube.io/transaction/{}", tx_hash);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Testnet Tokens Required"}),"\nTo run the transfer example, you'll need testnet GAS tokens. Get them from the ",(0,s.jsx)(n.a,{href:"https://neowish.ngd.network/",children:"Neo Testnet Faucet"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Always handle errors properly in production code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() {\n    let result = connect_and_query().await;\n    \n    match result {\n        Ok(block_count) => println!("Current block: {}", block_count),\n        Err(e) => eprintln!("Error: {}", e),\n    }\n}\n\nasync fn connect_and_query() -> Result<u32, Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    let block_count = client.get_block_count().await?;\n    Ok(block_count)\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"reusing-connections",children:"Reusing Connections"}),"\n",(0,s.jsx)(n.p,{children:"For better performance, reuse client connections:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use neo3::prelude::*;\n\npub struct NeoService {\n    client: RpcClient<HttpProvider>,\n}\n\nimpl NeoService {\n    pub fn new(endpoint: &str) -> Result<Self, Box<dyn std::error::Error>> {\n        let provider = HttpProvider::new(endpoint)?;\n        let client = RpcClient::new(provider);\n        Ok(Self { client })\n    }\n    \n    pub async fn get_block_count(&self) -> Result<u32, Box<dyn std::error::Error>> {\n        Ok(self.client.get_block_count().await?)\n    }\n    \n    pub async fn get_gas_balance(&self, address: &str) -> Result<u64, Box<dyn std::error::Error>> {\n        let script_hash = address.to_script_hash()?;\n        let gas_token = GasToken::new(&self.client);\n        Ok(gas_token.balance_of(&script_hash).await?)\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["\ud83c\udf89 ",(0,s.jsx)(n.strong,{children:"Congratulations!"})," You've successfully created your first Neo N3 applications with NeoRust."]}),"\n",(0,s.jsx)(n.h3,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udcda ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"Explore Documentation"})]})," - Learn about advanced features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udd0d ",(0,s.jsx)(n.a,{href:"/examples",children:"View Examples"})]})," - See more practical code examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udee0\ufe0f ",(0,s.jsx)(n.a,{href:"/cli",children:"Try the CLI Tool"})]})," - Use command-line tools for development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83d\udda5\ufe0f ",(0,s.jsx)(n.a,{href:"/gui",children:"Download GUI App"})]})," - Try the desktop wallet application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["\ud83e\udd1d ",(0,s.jsx)(n.a,{href:"https://github.com/R3E-Network/NeoRust/discussions",children:"Join Community"})]})," - Get help and share projects"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"useful-resources",children:"Useful Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://docs.neo.org/",children:"Neo N3 Docs"})})," - Official Neo documentation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://neowish.ngd.network/",children:"Testnet Faucet"})})," - Get testnet tokens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://testnet.neotube.io/",children:"Block Explorer"})})," - View transactions and blocks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://docs.rs/neo3",children:"API Reference"})})," - Complete API documentation"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Happy building! \ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);