"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[1976],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},9552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tokens","title":"Token Operations","description":"Work with NEP-17 and NEP-11 tokens on the Neo network.","source":"@site/sdk/tokens.md","sourceDirName":".","slug":"/tokens","permalink":"/sdk/tokens","draft":false,"unlisted":false,"editUrl":"https://github.com/R3E-Network/NeoRust/tree/main/website/sdk/tokens.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sdkSidebar","previous":{"title":"Smart Contracts","permalink":"/sdk/contracts"},"next":{"title":"API Reference","permalink":"/sdk/api-reference"}}');var o=t(4848),r=t(8453);const l={},i="Token Operations",a={},d=[{value:"NEP-17 Tokens (Fungible)",id:"nep-17-tokens-fungible",level:2},{value:"Custom NEP-17 Tokens",id:"custom-nep-17-tokens",level:2},{value:"NEP-11 NFTs",id:"nep-11-nfts",level:2},{value:"Token Standards",id:"token-standards",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"token-operations",children:"Token Operations"})}),"\n",(0,o.jsx)(n.p,{children:"Work with NEP-17 and NEP-11 tokens on the Neo network."}),"\n",(0,o.jsx)(n.h2,{id:"nep-17-tokens-fungible",children:"NEP-17 Tokens (Fungible)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // GAS token operations\n    let gas_token = GasToken::new(&client);\n    let symbol = gas_token.symbol().await?;\n    let decimals = gas_token.decimals().await?;\n    \n    println!("Token: {} (decimals: {})", symbol, decimals);\n    \n    // Check balance\n    let address = "NAddress".to_script_hash()?;\n    let balance = gas_token.balance_of(&address).await?;\n    println!("Balance: {} {}", balance, symbol);\n    \n    Ok(())\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"custom-nep-17-tokens",children:"Custom NEP-17 Tokens"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let token_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    let token = Nep17Token::new(&client, token_hash);\n    \n    let symbol = token.symbol().await?;\n    let total_supply = token.total_supply().await?;\n    \n    println!("Token: {} (supply: {})", symbol, total_supply);\n    Ok(())\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"nep-11-nfts",children:"NEP-11 NFTs"}),"\n",(0,o.jsx)(n.p,{children:"Support for Non-Fungible Tokens using the NEP-11 standard."}),"\n",(0,o.jsx)(n.h2,{id:"token-standards",children:"Token Standards"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NEP-17"}),": Fungible tokens (like ERC-20)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NEP-11"}),": Non-fungible tokens (like ERC-721)"]}),"\n",(0,o.jsx)(n.li,{children:"Native tokens: NEO and GAS"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);