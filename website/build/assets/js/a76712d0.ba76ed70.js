"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[75],{2056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"quick-start","title":"Quick Start","description":"Get up and running with NeoRust SDK in minutes.","source":"@site/sdk/quick-start.md","sourceDirName":".","slug":"/quick-start","permalink":"/sdk/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/R3E-Network/NeoRust/tree/main/website/sdk/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sdkSidebar","previous":{"title":"Installation","permalink":"/sdk/installation"},"next":{"title":"Examples","permalink":"/sdk/examples"}}');var s=t(4848),c=t(8453);const i={},a="Quick Start",o={},l=[{value:"Basic Connection",id:"basic-connection",level:2},{value:"Creating an Account",id:"creating-an-account",level:2},{value:"Checking Balances",id:"checking-balances",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsx)(n.p,{children:"Get up and running with NeoRust SDK in minutes."}),"\n",(0,s.jsx)(n.h2,{id:"basic-connection",children:"Basic Connection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to Neo N3 TestNet\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Get blockchain info\n    let block_count = client.get_block_count().await?;\n    println!("Current block height: {}", block_count);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-an-account",children:"Creating an Account"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new account\n    let account = Account::create()?;\n    \n    println!("Address: {}", account.get_address());\n    println!("Public Key: {}", hex::encode(account.get_public_key().encode_point(true)));\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"checking-balances",children:"Checking Balances"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let address = "NXXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx";\n    let script_hash = address.to_script_hash()?;\n    \n    // Get GAS balance\n    let gas_token = GasToken::new(&client);\n    let balance = gas_token.balance_of(&script_hash).await?;\n    println!("GAS Balance: {}", balance);\n    \n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdk/wallets",children:"Core Concepts"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdk/examples",children:"More Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdk/api-reference",children:"API Reference"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},c=r.createContext(s);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);