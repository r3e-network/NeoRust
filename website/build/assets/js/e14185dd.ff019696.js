"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[3233],{6432:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"transactions","title":"Transaction Management","description":"Build, sign, and broadcast transactions on the Neo network.","source":"@site/sdk/transactions.md","sourceDirName":".","slug":"/transactions","permalink":"/sdk/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/R3E-Network/NeoRust/tree/main/website/sdk/transactions.md","tags":[],"version":"current","lastUpdatedBy":"Jimmy","lastUpdatedAt":1748828770000,"frontMatter":{},"sidebar":"sdkSidebar","previous":{"title":"Wallet Management","permalink":"/sdk/wallets"},"next":{"title":"Smart Contracts","permalink":"/sdk/contracts"}}');var r=t(4848),a=t(8453);const i={},o="Transaction Management",c={},l=[{value:"Creating Transactions",id:"creating-transactions",level:2},{value:"Transaction Types",id:"transaction-types",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"Fees",id:"fees",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"transaction-management",children:"Transaction Management"})}),"\n",(0,r.jsx)(e.p,{children:"Build, sign, and broadcast transactions on the Neo network."}),"\n",(0,r.jsx)(e.h2,{id:"creating-transactions",children:"Creating Transactions"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let account = Account::from_private_key("your_private_key")?;\n    let signer = AccountSigner::new(account);\n    \n    let mut tx_builder = TransactionBuilder::new(&client);\n    \n    // Add operations to the transaction\n    let gas_token = GasToken::new(&client);\n    let recipient = "NAddress".to_script_hash()?;\n    tx_builder.add_transfer(&gas_token.script_hash(), &recipient, 1000000000)?;\n    \n    let tx = tx_builder.build_and_sign(&signer).await?;\n    let tx_hash = client.send_raw_transaction(&tx).await?;\n    \n    println!("Transaction sent: {}", tx_hash);\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"transaction-types",children:"Transaction Types"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Transfer"}),": Move tokens between accounts"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Contract Call"}),": Invoke smart contract methods"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Multi-operation"}),": Combine multiple operations"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,r.jsx)(e.p,{children:"Track transaction status and confirmations."}),"\n",(0,r.jsx)(e.h2,{id:"fees",children:"Fees"}),"\n",(0,r.jsx)(e.p,{children:"Understand network fees and priority settings."})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);