name: Security

on:
  schedule:
    - cron: '0 0 * * 1' # Weekly on Monday
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run dependency audit
        run: cargo audit --deny warnings
      
      - name: Check for known vulnerabilities
        run: |
          cargo audit --json > audit-report.json
          if [ -s audit-report.json ]; then
            echo "Found vulnerabilities:"
            cat audit-report.json
          fi

  deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Check licenses
        run: cargo deny check licenses
      
      - name: Check bans
        run: cargo deny check bans
      
      - name: Check advisories
        run: cargo deny check advisories
      
      - name: Check sources
        run: cargo deny check sources

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/rust
            p/secrets
          generateSarif: true
      
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Generate SBOM
        run: |
          cargo install cargo-sbom
          cargo sbom > sbom.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json
      
      - name: Check dependencies
        run: |
          # Check for deprecated dependencies
          cargo tree --depth 1 | grep -i "deprecated" && echo "Found deprecated dependencies" || echo "No deprecated dependencies"
          
          # Check for unmaintained dependencies
          cargo install cargo-outdated
          cargo outdated --exit-code 1 || echo "Found outdated dependencies"

  secrets:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for hardcoded secrets
        run: |
          # Check for common secret patterns
          ! grep -r "password\s*=\s*[\"'][^\"']*[\"']" --include="*.rs" src/ || (echo "Found hardcoded passwords" && exit 1)
          ! grep -r "api_key\s*=\s*[\"'][^\"']*[\"']" --include="*.rs" src/ || (echo "Found hardcoded API keys" && exit 1)
          ! grep -r "secret\s*=\s*[\"'][^\"']*[\"']" --include="*.rs" src/ || (echo "Found hardcoded secrets" && exit 1)

  fuzzing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      
      - name: Run fuzz tests
        run: |
          # Create fuzz directory if it doesn't exist
          mkdir -p fuzz
          
          # Run fuzzing for critical components
          # cargo fuzz run transaction_parser -- -max_total_time=300
          # cargo fuzz run script_builder -- -max_total_time=300
          echo "Fuzzing tests would run here in a real setup"

  gui-security:
    name: GUI Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        working-directory: neo-gui
        run: npm ci
      
      - name: Run npm audit
        working-directory: neo-gui
        run: npm audit --production
      
      - name: Check for vulnerable dependencies
        working-directory: neo-gui
        run: |
          npm install -g better-npm-audit
          better-npm-audit audit --production

  report:
    name: Security Report
    needs: [audit, deny, semgrep, supply-chain, secrets, gui-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Add status for each job
          echo "- Dependency Audit: ${{ needs.audit.result }}" >> security-report.md
          echo "- License Check: ${{ needs.deny.result }}" >> security-report.md
          echo "- Static Analysis: ${{ needs.semgrep.result }}" >> security-report.md
          echo "- Supply Chain: ${{ needs.supply-chain.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secrets.result }}" >> security-report.md
          echo "- GUI Security: ${{ needs.gui-security.result }}" >> security-report.md
      
      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md