"use strict";(self.webpackChunkneorust_website=self.webpackChunkneorust_website||[]).push([[4933],{8369:(e,n,t)=>{t.r(n),t.d(n,{default:()=>_});var a=t(6540),r=t(8978),s=t(9033),o=t(8957),c=t(4164);const i={examplesHeader:"examplesHeader_F0Zs",pageTitle:"pageTitle_SNkI",pageSubtitle:"pageSubtitle_ndaR",examplesMain:"examplesMain_jCSW",examplesContent:"examplesContent_WwYa",sectionTitle:"sectionTitle_sca0",categoryNav:"categoryNav__HQV",categoryButtons:"categoryButtons_UUSR",categoryButton:"categoryButton_u1Jj",categoryDescription:"categoryDescription_inMZ",categoryInfo:"categoryInfo_llbL",categoryTitle:"categoryTitle_G9Qg",categorySubtitle:"categorySubtitle_XMCB",examplesGrid:"examplesGrid_Hxj_",example:"example_hEbV",exampleHeader:"exampleHeader_W0ah",exampleTitle:"exampleTitle_Skjv",exampleDescription:"exampleDescription_Fn_s",tags:"tags_PrCe",tag:"tag_QM5V",copyButton:"copyButton_q8IR",codeContainer:"codeContainer_m3yU",ctaSection:"ctaSection_jDMX",ctaContent:"ctaContent_F0xe",ctaTitle:"ctaTitle_mId0",ctaSubtitle:"ctaSubtitle_dsjU",ctaButtons:"ctaButtons_wTWk",ctaButton:"ctaButton_AdEB",resourcesSection:"resourcesSection_iE0T",resourcesGrid:"resourcesGrid_EzXx",resource:"resource_Vy_D",resourceIcon:"resourceIcon_UHUF",resourceTitle:"resourceTitle_SS13",resourceDescription:"resourceDescription_sTUN",resourceLink:"resourceLink_IMhx",fadeInUp:"fadeInUp_hwwr"};var l=t(4848);const d=[{id:"basic",title:"Basic Operations",description:"Essential operations like connecting to the network, creating accounts, and checking balances.",icon:"\ud83d\ude80"},{id:"wallet",title:"Wallet Management",description:"Create, load, and manage Neo wallets with the NEP-6 standard.",icon:"\ud83d\udcb0"},{id:"tokens",title:"Token Operations",description:"Work with NEP-17 tokens, transfers, and balance checking.",icon:"\ud83e\ude99"},{id:"contracts",title:"Smart Contracts",description:"Deploy and interact with smart contracts on Neo N3.",icon:"\ud83d\udccb"},{id:"advanced",title:"Advanced Patterns",description:"Advanced techniques including batch operations and multi-sig transactions.",icon:"\ud83c\udfaf"},{id:"neo-x",title:"Neo X Integration",description:"Cross-chain operations and EVM compatibility features.",icon:"\ud83d\udd17"}],p={basic:[{title:"Connect to Neo Network",description:"Establish connection to Neo N3 network and get blockchain info.",tags:["connection","rpc","basics"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to Neo N3 TestNet\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Get blockchain information\n    let block_count = client.get_block_count().await?;\n    let version = client.get_version().await?;\n    \n    println!("Current block height: {}", block_count);\n    println!("Node version: {}", version.useragent);\n    println!("Network: {}", version.network);\n    \n    Ok(())\n}'},{title:"Create New Account",description:"Generate a new account with private key and address.",tags:["account","keys","address"],code:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new account\n    let account = Account::create()?;\n    \n    println!("Address: {}", account.get_address());\n    println!("Public Key: {}", hex::encode(account.get_public_key().encode_point(true)));\n    println!("Script Hash: {}", account.get_script_hash());\n    \n    // Export private key (be careful with this!)\n    let private_key = account.get_private_key();\n    println!("Private Key: {}", hex::encode(private_key.as_bytes()));\n    \n    Ok(())\n}'},{title:"Check Account Balance",description:"Check GAS and NEO balances for any account.",tags:["balance","gas","neo"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let address = "NXXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx";\n    let script_hash = address.to_script_hash()?;\n    \n    // Check GAS balance\n    let gas_token = GasToken::new(&client);\n    let gas_balance = gas_token.balance_of(&script_hash).await?;\n    let gas_decimals = gas_token.decimals().await?;\n    println!("GAS Balance: {} ({})", gas_balance, gas_decimals);\n    \n    // Check NEO balance  \n    let neo_token = NeoToken::new(&client);\n    let neo_balance = neo_token.balance_of(&script_hash).await?;\n    println!("NEO Balance: {}", neo_balance);\n    \n    Ok(())\n}'}],wallet:[{title:"Create NEP-6 Wallet",description:"Create a new wallet following NEP-6 standard.",tags:["nep6","wallet","json"],code:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new wallet\n    let mut wallet = Wallet::new();\n    wallet.set_name("MyWallet".to_string());\n    \n    // Add accounts to wallet\n    let account1 = Account::create()?;\n    let account2 = Account::create()?;\n    \n    wallet.add_account(account1);\n    wallet.add_account(account2);\n    \n    // Set default account\n    if let Some(first_account) = wallet.get_accounts().first() {\n        wallet.set_default_account(first_account.get_script_hash());\n    }\n    \n    println!("Wallet \'{}\' created with {} accounts", \n             wallet.get_name(), \n             wallet.get_accounts().len());\n    \n    // Save to NEP-6 format\n    let password = "secure_password";\n    let nep6_wallet = wallet.to_nep6(password)?;\n    \n    let json = serde_json::to_string_pretty(&nep6_wallet)?;\n    std::fs::write("wallet.json", json)?;\n    \n    Ok(())\n}'},{title:"Load Existing Wallet",description:"Load and decrypt an existing NEP-6 wallet.",tags:["nep6","load","decrypt"],code:'use neo3::prelude::*;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Load wallet from file\n    let wallet_json = std::fs::read_to_string("wallet.json")?;\n    let nep6_wallet: Nep6Wallet = serde_json::from_str(&wallet_json)?;\n    \n    println!("Loaded wallet: {}", nep6_wallet.name);\n    println!("Version: {}", nep6_wallet.version);\n    println!("Accounts: {}", nep6_wallet.accounts.len());\n    \n    // Decrypt wallet with password\n    let password = "secure_password";\n    let wallet = Wallet::from_nep6(&nep6_wallet, password)?;\n    \n    // List all accounts\n    for account in wallet.get_accounts() {\n        println!("Account: {}", account.get_address());\n        if let Some(label) = account.get_label() {\n            println!("  Label: {}", label);\n        }\n    }\n    \n    Ok(())\n}'}],tokens:[{title:"Transfer GAS Tokens",description:"Transfer GAS tokens between accounts.",tags:["transfer","gas","transaction"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Load sender account\n    let sender = Account::from_private_key("your_private_key_here")?;\n    let signer = AccountSigner::new(sender);\n    \n    // Prepare transfer\n    let gas_token = GasToken::new(&client);\n    let recipient = "NRecipientAddressHere".to_script_hash()?;\n    let amount = 1_000_000_000; // 10 GAS (8 decimals)\n    \n    // Send transfer transaction\n    let tx_hash = gas_token\n        .transfer(&signer, &recipient, amount, None)\n        .await?;\n    \n    println!("Transfer transaction sent: {}", tx_hash);\n    println!("Monitor at: https://testnet.neotube.io/transaction/{}", tx_hash);\n    \n    Ok(())\n}'},{title:"Custom NEP-17 Token",description:"Interact with custom NEP-17 tokens.",tags:["nep17","custom","token"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Custom token contract hash\n    let token_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    let token = Nep17Token::new(&client, token_hash);\n    \n    // Get token info\n    let symbol = token.symbol().await?;\n    let decimals = token.decimals().await?;\n    let total_supply = token.total_supply().await?;\n    \n    println!("Token Symbol: {}", symbol);\n    println!("Decimals: {}", decimals);\n    println!("Total Supply: {}", total_supply);\n    \n    // Check balance\n    let address = "NAddressHere".to_script_hash()?;\n    let balance = token.balance_of(&address).await?;\n    println!("Balance: {} {}", balance, symbol);\n    \n    Ok(())\n}'}],contracts:[{title:"Invoke Contract Method",description:"Call smart contract methods with parameters.",tags:["contract","invoke","parameters"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let contract_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    \n    // Read-only contract call\n    let result = client\n        .invoke_function(\n            &contract_hash,\n            "getValue",\n            vec![ContractParameter::String("key1".to_string())],\n            vec![], // No signers for read-only\n        )\n        .await?;\n    \n    println!("Contract Result:");\n    println!("State: {}", result.state);\n    println!("Gas Consumed: {}", result.gas_consumed);\n    \n    if let Some(stack) = result.stack {\n        for item in stack {\n            println!("Stack Item: {:?}", item);\n        }\n    }\n    \n    Ok(())\n}'},{title:"State-Changing Contract Call",description:"Execute contract methods that modify blockchain state.",tags:["contract","state","transaction"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    // Load account for signing\n    let account = Account::from_private_key("your_private_key")?;\n    let signer = AccountSigner::new(account);\n    \n    let contract_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    \n    // State-changing contract call\n    let tx_hash = client\n        .invoke_function_tx(\n            &signer,\n            &contract_hash,\n            "setValue",\n            vec![\n                ContractParameter::String("key1".to_string()),\n                ContractParameter::String("new_value".to_string()),\n            ],\n            None, // Use default fees\n        )\n        .await?;\n    \n    println!("Transaction sent: {}", tx_hash);\n    println!("View at: https://testnet.neotube.io/transaction/{}", tx_hash);\n    \n    Ok(())\n}'}],advanced:[{title:"Multi-Operation Transaction",description:"Combine multiple operations in a single transaction.",tags:["multi-op","batch","transaction"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let client = RpcClient::new(provider);\n    \n    let account = Account::from_private_key("your_private_key")?;\n    let signer = AccountSigner::new(account);\n    \n    // Create transaction builder\n    let mut tx_builder = TransactionBuilder::new(&client);\n    \n    // Add multiple operations\n    let gas_token = GasToken::new(&client);\n    let recipient1 = "NAddress1".to_script_hash()?;\n    let recipient2 = "NAddress2".to_script_hash()?;\n    \n    // Add transfers\n    tx_builder.add_transfer(&gas_token.script_hash(), &recipient1, 1_000_000_000)?;\n    tx_builder.add_transfer(&gas_token.script_hash(), &recipient2, 2_000_000_000)?;\n    \n    // Add contract call\n    let contract_hash = "0x1234567890abcdef1234567890abcdef12345678".parse()?;\n    tx_builder.add_contract_call(\n        &contract_hash,\n        "updateValue",\n        vec![ContractParameter::String("batch_update".to_string())],\n    )?;\n    \n    // Build and send transaction\n    let tx = tx_builder.build_and_sign(&signer).await?;\n    let tx_hash = client.send_raw_transaction(&tx).await?;\n    \n    println!("Multi-operation transaction: {}", tx_hash);\n    \n    Ok(())\n}'}],"neo-x":[{title:"Cross-Chain Bridge",description:"Bridge assets between Neo N3 and Neo X networks.",tags:["bridge","cross-chain","neo-x"],code:'use neo3::prelude::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Neo N3 connection\n    let n3_provider = HttpProvider::new("https://testnet1.neo.org:443")?;\n    let n3_client = RpcClient::new(n3_provider);\n    \n    // Neo X connection  \n    let neo_x_provider = HttpProvider::new("https://neoxt4seed1.ngd.network:443")?;\n    let neo_x_client = RpcClient::new(neo_x_provider);\n    \n    let account = Account::from_private_key("your_private_key")?;\n    let signer = AccountSigner::new(account);\n    \n    // Bridge contract on Neo N3\n    let bridge_contract = "0xBridgeContractHashHere".parse()?;\n    \n    // Initiate bridge transfer\n    let amount = 10_000_000_000; // 100 GAS\n    let neo_x_address = "0xYourNeoXAddressHere";\n    \n    let tx_hash = n3_client\n        .invoke_function_tx(\n            &signer,\n            &bridge_contract,\n            "bridgeToNeoX",\n            vec![\n                ContractParameter::Integer(amount.into()),\n                ContractParameter::String(neo_x_address.to_string()),\n            ],\n            None,\n        )\n        .await?;\n    \n    println!("Bridge transaction initiated: {}", tx_hash);\n    println!("Monitor for completion on both networks");\n    \n    Ok(())\n}'}]},u=e=>{navigator.clipboard.writeText(e).then((()=>{}))};function _(){const[e,n]=(0,a.useState)("basic"),t=d.find((n=>n.id===e)),_=p[e]||[];return(0,l.jsxs)(r.A,{title:"Examples",description:"Comprehensive examples and tutorials for NeoRust SDK - Learn by example with real-world code samples",children:[(0,l.jsx)("header",{className:i.examplesHeader,children:(0,l.jsxs)("div",{className:"container",children:[(0,l.jsx)("h1",{className:(0,c.A)("gradient-text",i.pageTitle),children:"Code Examples"}),(0,l.jsx)("p",{className:i.pageSubtitle,children:"Learn NeoRust SDK through practical examples. From basic operations to advanced patterns, explore real-world code samples that you can use in your projects."})]})}),(0,l.jsx)("main",{className:i.examplesMain,children:(0,l.jsx)("div",{className:"container",children:(0,l.jsxs)("div",{className:i.examplesContent,children:[(0,l.jsx)("div",{className:i.categoryNav,children:(0,l.jsx)("div",{className:i.categoryButtons,children:d.map((t=>(0,l.jsxs)("button",{onClick:()=>n(t.id),className:(0,c.A)("btn",i.categoryButton,e===t.id?"btn-primary":"btn-secondary"),children:[(0,l.jsx)("span",{children:t.icon}),t.title]},t.id)))})}),t&&(0,l.jsx)("div",{className:i.categoryDescription,children:(0,l.jsxs)("div",{className:i.categoryInfo,children:[(0,l.jsxs)("h2",{className:i.categoryTitle,children:[t.icon," ",t.title]}),(0,l.jsx)("p",{className:i.categorySubtitle,children:t.description})]})}),(0,l.jsx)("div",{className:i.examplesGrid,children:_.map(((e,n)=>(0,l.jsxs)("div",{className:(0,c.A)("card",i.example),children:[(0,l.jsxs)("div",{className:i.exampleHeader,children:[(0,l.jsxs)("div",{children:[(0,l.jsx)("h3",{className:i.exampleTitle,children:e.title}),(0,l.jsx)("p",{className:i.exampleDescription,children:e.description}),(0,l.jsx)("div",{className:i.tags,children:e.tags.map((e=>(0,l.jsx)("span",{className:i.tag,children:e},e)))})]}),(0,l.jsx)("button",{onClick:()=>u(e.code),className:(0,c.A)("btn btn-secondary",i.copyButton),title:"Copy to clipboard",children:"\ud83d\udccb"})]}),(0,l.jsx)("div",{className:i.codeContainer,children:(0,l.jsx)(s.A,{language:"rust",showLineNumbers:!0,children:e.code})})]},n)))}),(0,l.jsx)("div",{className:i.ctaSection,children:(0,l.jsxs)("div",{className:i.ctaContent,children:[(0,l.jsx)("h2",{className:i.ctaTitle,children:"Ready to Build?"}),(0,l.jsx)("p",{className:i.ctaSubtitle,children:"Start building your Neo N3 application with NeoRust SDK. Check out our comprehensive documentation and guides."}),(0,l.jsxs)("div",{className:i.ctaButtons,children:[(0,l.jsx)(o.A,{to:"/docs/intro",className:(0,c.A)("btn btn-primary",i.ctaButton),children:"\ud83d\udcda Read Documentation"}),(0,l.jsx)(o.A,{to:"/sdk",className:(0,c.A)("btn btn-secondary",i.ctaButton),children:"\ud83e\udd80 Explore SDK"}),(0,l.jsx)("a",{href:"https://github.com/R3E-Network/NeoRust",className:(0,c.A)("btn btn-secondary",i.ctaButton),target:"_blank",rel:"noopener noreferrer",children:"\u2b50 View on GitHub"})]})]})}),(0,l.jsxs)("div",{className:i.resourcesSection,children:[(0,l.jsx)("h2",{className:i.sectionTitle,children:"Additional Resources"}),(0,l.jsxs)("div",{className:i.resourcesGrid,children:[(0,l.jsxs)("div",{className:(0,c.A)("card",i.resource),children:[(0,l.jsx)("div",{className:i.resourceIcon,children:"\ud83d\udcd6"}),(0,l.jsx)("h3",{className:i.resourceTitle,children:"API Documentation"}),(0,l.jsx)("p",{className:i.resourceDescription,children:"Comprehensive API reference with detailed method documentation."}),(0,l.jsx)("a",{href:"https://docs.rs/neo3",className:i.resourceLink,children:"View API Docs \u2192"})]}),(0,l.jsxs)("div",{className:(0,c.A)("card",i.resource),children:[(0,l.jsx)("div",{className:i.resourceIcon,children:"\ud83c\udf93"}),(0,l.jsx)("h3",{className:i.resourceTitle,children:"Tutorials"}),(0,l.jsx)("p",{className:i.resourceDescription,children:"Step-by-step tutorials for building complete applications."}),(0,l.jsx)(o.A,{to:"/docs/tutorials",className:i.resourceLink,children:"Start Learning \u2192"})]}),(0,l.jsxs)("div",{className:(0,c.A)("card",i.resource),children:[(0,l.jsx)("div",{className:i.resourceIcon,children:"\ud83d\udcac"}),(0,l.jsx)("h3",{className:i.resourceTitle,children:"Community"}),(0,l.jsx)("p",{className:i.resourceDescription,children:"Join our community for help, discussions, and contributions."}),(0,l.jsx)("a",{href:"https://github.com/R3E-Network/NeoRust/discussions",className:i.resourceLink,children:"Join Discussion \u2192"})]})]})]})]})})})]})}}}]);