name: Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.rs'
      - '**.md'
      - '**/Cargo.toml'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.rs'
      - '**.md'
      - '**/Cargo.toml'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-rust-docs:
    name: Build Rust Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-docs
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build documentation
        run: |
          cargo doc --workspace --no-deps --all-features
          echo '<meta http-equiv="refresh" content="0; url=neo3">' > target/doc/index.html
      
      - name: Check documentation links
        run: |
          cargo doc --workspace --no-deps --all-features 2>&1 | grep -i "warning" && echo "Documentation warnings found" || echo "Documentation is clean"
      
      - name: Upload Rust docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-docs
          path: target/doc

  build-mdbook:
    name: Build mdBook Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install mdBook
        run: |
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.36/mdbook-v0.4.36-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          sudo mv mdbook /usr/local/bin/
      
      - name: Install mdBook plugins
        run: |
          cargo install mdbook-mermaid
          cargo install mdbook-linkcheck
          cargo install mdbook-toc
      
      - name: Build book
        working-directory: docs
        run: |
          mdbook build
          mdbook test
      
      - name: Upload book artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdbook
          path: docs/book/html

  build-gui-docs:
    name: Build GUI Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        working-directory: neo-gui
        run: npm ci
      
      - name: Build TypeDoc
        working-directory: neo-gui
        run: |
          npm install -g typedoc
          typedoc --out docs src/
      
      - name: Upload GUI docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: gui-docs
          path: neo-gui/docs

  build-website:
    name: Build Documentation Website
    needs: [build-rust-docs, build-mdbook, build-gui-docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create documentation structure
        run: |
          mkdir -p public
          cp -r artifacts/mdbook/* public/
          cp -r artifacts/rust-docs public/api
          cp -r artifacts/gui-docs public/gui
          
          # Create landing page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>NeoRust Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #f5f5f5;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                  }
                  .cards {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 2rem;
                  }
                  .card {
                      background: white;
                      padding: 2rem;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      text-decoration: none;
                      color: inherit;
                      transition: transform 0.2s;
                  }
                  .card:hover {
                      transform: translateY(-4px);
                      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                  }
                  .card h2 {
                      margin-top: 0;
                      color: #333;
                  }
                  .card p {
                      color: #666;
                      line-height: 1.6;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>NeoRust Documentation</h1>
                  <p>Professional Neo N3 SDK for Rust</p>
              </div>
              
              <div class="cards">
                  <a href="./index.html" class="card">
                      <h2>üìö User Guide</h2>
                      <p>Learn how to use NeoRust with comprehensive guides, tutorials, and examples.</p>
                  </a>
                  
                  <a href="./api/neo3/index.html" class="card">
                      <h2>üîß API Reference</h2>
                      <p>Complete API documentation for all NeoRust crates and modules.</p>
                  </a>
                  
                  <a href="./gui/index.html" class="card">
                      <h2>üñ•Ô∏è GUI Documentation</h2>
                      <p>Documentation for the NeoRust desktop application built with Tauri.</p>
                  </a>
              </div>
          </body>
          </html>
          EOF
      
      - name: Upload website artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: public

  deploy:
    name: Deploy to GitHub Pages
    needs: build-website
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: public
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: public
      
      - name: Deploy to Pages
        uses: actions/deploy-pages@v2

  check-links:
    name: Check Documentation Links
    needs: build-website
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: public
      
      - name: Install link checker
        run: |
          npm install -g linkinator
      
      - name: Check links
        run: |
          linkinator public --recurse --skip "github.com" --timeout 10000 || true

  validate-examples:
    name: Validate Documentation Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Extract and test code examples
        run: |
          # Extract code examples from Rust docs
          find src -name "*.rs" -exec grep -l "```rust" {} \; | while read file; do
            echo "Checking examples in $file"
            # This would extract and compile examples
          done
          
          # Extract code examples from markdown
          find docs -name "*.md" -exec grep -l "```rust" {} \; | while read file; do
            echo "Checking examples in $file"
            # This would extract and compile examples
          done